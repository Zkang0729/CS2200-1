! This program executes pow as a test program using the LC 2200 calling convention
! Check your registers ($v0) and memory to see if it is consistent with this program

0main:	  lea $sp, initsp                       ! initialize the stack pointer   
1        lw $sp, 0($sp)                        ! finish initialization   

2        lea $a0, BASE                         ! load base for pow
3        lw $a0, 0($a0)
4        lea $a1, EXP                          ! load power for pow
5        lw $a1, 0($a1)
6        lea $at, POW                          ! load address of pow
7        jalr $ra, $at                         ! run pow
8        lea $a0, ANS                          ! load base for pow
9        sw $v0, 0($a0)

a        halt

bBASE:   .fill 2
cEXP:    .fill 3
dANS:	  .fill 0                               ! should come out to 1024

ePOW:    addi $sp, $sp, -1                     ! allocate space for old frame pointer
f        sw $fp, 0($sp)
10        addi $fp, $sp, 0                      ! set new frame pinter
11        add $t1, $zero, $zero                 ! $t1 = 0

12        addi $t2, $zero, 1                    ! $t2 = 1

13        slt $t1, $a1, $t2                     ! check if $a1 is 0 (if not, $t1 = 0)
14        bne $t1, $zero, RET1                  ! if $t1 == 1, branch to RET1
15        add $t1, $zero, $zero                 ! $t1 = 0
16        addi $t2, $zero, 1                    ! $t2 = 1
17        slt $t1, $a0, $t2                     ! if the base is 0, $t1 = 1
18        bne $t1, $zero, RET0                  ! if $t1 == 1, branch to RET0
19        addi $a1, $a1, -1                     ! decrement the power


1a        lea $at, POW                          ! load the address of POW

1b        addi $sp, $sp, -2                     ! push 2 slots onto the stack
1c        sw $ra, -1($fp)                       ! save RA to stack
1d        sw $a0, -2($fp)                       ! save arg 0 to stack

1e        jalr $ra, $at                         ! recursively call POW

1f        add $a1, $v0, $zero                   ! store return value in arg 1
20        lw $a0, -2($fp)                       ! load the base into arg 0
21        lea $at, MULT                         ! load the address of MULT
22        jalr $ra, $at                         ! multiply arg 0 (base) and arg 1 (running product)
23        lw $ra, -1($fp)                       ! load RA from the stack
24        addi $sp, $sp, 2
25        addi $t1, $zero, 1                    ! $t1 = 1
26        bne $zero, $t1, FIN                   ! unconditional branch to FIN
27RET1:   addi $v0, $zero, 1                    ! return a value of 1
28        addi $t1, $zero, 1                    ! $t1 = 1
29        bne $zero, $t1, FIN                   ! unconditional branch to FIN
2aRET0:   add $v0, $zero, $zero                 ! return a value of 0
2bFIN:	  lw $fp, 0($fp)                        ! restore old frame pointer
2c        addi $sp, $sp, 1                      ! pop off the stack
2d        jalr $zero, $ra

2eMULT:   add $v0, $zero, $zero                 ! zero out return value
2f        addi $t0, $zero, 1
30AGAIN:  add $v0, $v0, $a0                     ! multiply loop
31        addi $t0, $t0, 1
32        add $t1, $zero, $zero                 ! $t1 = 0
33        addi $t2, $a1, 1                      ! $t2 = $a1 + 1
34        slt $t1, $t0, $t2                     ! $t1 = 1, if $t0 < $t2 (if not, $t1 = 0)
35        bne $t1, $zero, AGAIN                 ! if $t1 = 1, loop again
36        jalr $zero, $ra

37initsp: .fill 0xA00000
